<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="4494"><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::fmt::Debug&gt;::fmt (3 samples, 0.07%)</title><rect x="0.0000%" y="757" width="0.0668%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.09%)</title><rect x="0.0668%" y="741" width="0.0890%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.3168%" y="751.50"></text></g><g><title>__GI___libc_free (4 samples, 0.09%)</title><rect x="0.1558%" y="741" width="0.0890%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="4"/><text x="0.4058%" y="751.50"></text></g><g><title>__ieee754_log_fma (15 samples, 0.33%)</title><rect x="0.2448%" y="741" width="0.3338%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="15"/><text x="0.4948%" y="751.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.07%)</title><rect x="0.6676%" y="725" width="0.0668%" height="15" fill="rgb(208,68,35)" fg:x="30" fg:w="3"/><text x="0.9176%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.07%)</title><rect x="0.6676%" y="709" width="0.0668%" height="15" fill="rgb(232,128,0)" fg:x="30" fg:w="3"/><text x="0.9176%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.07%)</title><rect x="0.6676%" y="693" width="0.0668%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="3"/><text x="0.9176%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.07%)</title><rect x="0.6676%" y="677" width="0.0668%" height="15" fill="rgb(228,23,34)" fg:x="30" fg:w="3"/><text x="0.9176%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.07%)</title><rect x="0.6676%" y="661" width="0.0668%" height="15" fill="rgb(218,30,26)" fg:x="30" fg:w="3"/><text x="0.9176%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.07%)</title><rect x="0.6676%" y="645" width="0.0668%" height="15" fill="rgb(220,122,19)" fg:x="30" fg:w="3"/><text x="0.9176%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.07%)</title><rect x="0.6676%" y="629" width="0.0668%" height="15" fill="rgb(250,228,42)" fg:x="30" fg:w="3"/><text x="0.9176%" y="639.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.07%)</title><rect x="0.6676%" y="613" width="0.0668%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="3"/><text x="0.9176%" y="623.50"></text></g><g><title>alloc::fmt::format (12 samples, 0.27%)</title><rect x="0.5785%" y="741" width="0.2670%" height="15" fill="rgb(216,20,37)" fg:x="26" fg:w="12"/><text x="0.8285%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.11%)</title><rect x="0.7343%" y="725" width="0.1113%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="5"/><text x="0.9843%" y="735.50"></text></g><g><title>[[heap]] (46 samples, 1.02%)</title><rect x="0.0668%" y="757" width="1.0236%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="46"/><text x="0.3168%" y="767.50"></text></g><g><title>pearl::utils::functions::logsumexp (11 samples, 0.24%)</title><rect x="0.8456%" y="741" width="0.2448%" height="15" fill="rgb(231,73,38)" fg:x="38" fg:w="11"/><text x="1.0956%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.53%)</title><rect x="1.0903%" y="741" width="0.5340%" height="15" fill="rgb(225,20,46)" fg:x="49" fg:w="24"/><text x="1.3403%" y="751.50"></text></g><g><title>__GI___exp (1 samples, 0.02%)</title><rect x="1.6244%" y="741" width="0.0223%" height="15" fill="rgb(210,31,41)" fg:x="73" fg:w="1"/><text x="1.8744%" y="751.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.16%)</title><rect x="1.6466%" y="741" width="0.1558%" height="15" fill="rgb(221,200,47)" fg:x="74" fg:w="7"/><text x="1.8966%" y="751.50"></text></g><g><title>__ieee754_exp_fma (5 samples, 0.11%)</title><rect x="1.8024%" y="741" width="0.1113%" height="15" fill="rgb(226,26,5)" fg:x="81" fg:w="5"/><text x="2.0524%" y="751.50"></text></g><g><title>core::fmt::Formatter::write_fmt (19 samples, 0.42%)</title><rect x="1.9137%" y="741" width="0.4228%" height="15" fill="rgb(249,33,26)" fg:x="86" fg:w="19"/><text x="2.1637%" y="751.50"></text></g><g><title>core::fmt::write (37 samples, 0.82%)</title><rect x="2.3364%" y="741" width="0.8233%" height="15" fill="rgb(235,183,28)" fg:x="105" fg:w="37"/><text x="2.5864%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.11%)</title><rect x="3.1598%" y="741" width="0.1113%" height="15" fill="rgb(221,5,38)" fg:x="142" fg:w="5"/><text x="3.4098%" y="751.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message (6 samples, 0.13%)</title><rect x="3.2710%" y="741" width="0.1335%" height="15" fill="rgb(247,18,42)" fg:x="147" fg:w="6"/><text x="3.5210%" y="751.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message_mut (6 samples, 0.13%)</title><rect x="3.4045%" y="741" width="0.1335%" height="15" fill="rgb(241,131,45)" fg:x="153" fg:w="6"/><text x="3.6545%" y="751.50"></text></g><g><title>[[stack]] (112 samples, 2.49%)</title><rect x="1.0903%" y="757" width="2.4922%" height="15" fill="rgb(249,31,29)" fg:x="49" fg:w="112"/><text x="1.3403%" y="767.50">[[..</text></g><g><title>pearl::utils::functions::logsumexp (2 samples, 0.04%)</title><rect x="3.5381%" y="741" width="0.0445%" height="15" fill="rgb(225,111,53)" fg:x="159" fg:w="2"/><text x="3.7881%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.20%)</title><rect x="3.5826%" y="741" width="0.2003%" height="15" fill="rgb(238,160,17)" fg:x="161" fg:w="9"/><text x="3.8326%" y="751.50"></text></g><g><title>__GI___libc_free (8 samples, 0.18%)</title><rect x="3.7828%" y="741" width="0.1780%" height="15" fill="rgb(214,148,48)" fg:x="170" fg:w="8"/><text x="4.0328%" y="751.50"></text></g><g><title>__ieee754_log_fma (20 samples, 0.45%)</title><rect x="3.9608%" y="741" width="0.4450%" height="15" fill="rgb(232,36,49)" fg:x="178" fg:w="20"/><text x="4.2108%" y="751.50"></text></g><g><title>[libc-2.27.so] (40 samples, 0.89%)</title><rect x="3.5826%" y="757" width="0.8901%" height="15" fill="rgb(209,103,24)" fg:x="161" fg:w="40"/><text x="3.8326%" y="767.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message_mut (3 samples, 0.07%)</title><rect x="4.4059%" y="741" width="0.0668%" height="15" fill="rgb(229,88,8)" fg:x="198" fg:w="3"/><text x="4.6559%" y="751.50"></text></g><g><title>[libm-2.27.so] (1 samples, 0.02%)</title><rect x="4.4726%" y="757" width="0.0223%" height="15" fill="rgb(213,181,19)" fg:x="201" fg:w="1"/><text x="4.7226%" y="767.50"></text></g><g><title>__ieee754_exp_fma (1 samples, 0.02%)</title><rect x="4.4726%" y="741" width="0.0223%" height="15" fill="rgb(254,191,54)" fg:x="201" fg:w="1"/><text x="4.7226%" y="751.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (34 samples, 0.76%)</title><rect x="4.4949%" y="741" width="0.7566%" height="15" fill="rgb(241,83,37)" fg:x="202" fg:w="34"/><text x="4.7449%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (14 samples, 0.31%)</title><rect x="4.9399%" y="725" width="0.3115%" height="15" fill="rgb(233,36,39)" fg:x="222" fg:w="14"/><text x="5.1899%" y="735.50"></text></g><g><title>alloc::string::String::push_str (14 samples, 0.31%)</title><rect x="4.9399%" y="709" width="0.3115%" height="15" fill="rgb(226,3,54)" fg:x="222" fg:w="14"/><text x="5.1899%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (14 samples, 0.31%)</title><rect x="4.9399%" y="693" width="0.3115%" height="15" fill="rgb(245,192,40)" fg:x="222" fg:w="14"/><text x="5.1899%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 0.31%)</title><rect x="4.9399%" y="677" width="0.3115%" height="15" fill="rgb(238,167,29)" fg:x="222" fg:w="14"/><text x="5.1899%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (14 samples, 0.31%)</title><rect x="4.9399%" y="661" width="0.3115%" height="15" fill="rgb(232,182,51)" fg:x="222" fg:w="14"/><text x="5.1899%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.31%)</title><rect x="4.9399%" y="645" width="0.3115%" height="15" fill="rgb(231,60,39)" fg:x="222" fg:w="14"/><text x="5.1899%" y="655.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="5.2514%" y="741" width="0.0223%" height="15" fill="rgb(208,69,12)" fg:x="236" fg:w="1"/><text x="5.5014%" y="751.50"></text></g><g><title>core::fmt::Formatter::pad_integral (22 samples, 0.49%)</title><rect x="5.2737%" y="741" width="0.4895%" height="15" fill="rgb(235,93,37)" fg:x="237" fg:w="22"/><text x="5.5237%" y="751.50"></text></g><g><title>[pearl] (70 samples, 1.56%)</title><rect x="4.4949%" y="757" width="1.5576%" height="15" fill="rgb(213,116,39)" fg:x="202" fg:w="70"/><text x="4.7449%" y="767.50"></text></g><g><title>core::fmt::write (13 samples, 0.29%)</title><rect x="5.7632%" y="741" width="0.2893%" height="15" fill="rgb(222,207,29)" fg:x="259" fg:w="13"/><text x="6.0132%" y="751.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (51 samples, 1.13%)</title><rect x="6.0525%" y="741" width="1.1348%" height="15" fill="rgb(206,96,30)" fg:x="272" fg:w="51"/><text x="6.3025%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="7.1874%" y="741" width="0.0445%" height="15" fill="rgb(218,138,4)" fg:x="323" fg:w="2"/><text x="7.4374%" y="751.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::fmt::Debug&gt;::fmt (7 samples, 0.16%)</title><rect x="7.2319%" y="741" width="0.1558%" height="15" fill="rgb(250,191,14)" fg:x="325" fg:w="7"/><text x="7.4819%" y="751.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (35 samples, 0.78%)</title><rect x="7.3876%" y="741" width="0.7788%" height="15" fill="rgb(239,60,40)" fg:x="332" fg:w="35"/><text x="7.6376%" y="751.50"></text></g><g><title>&lt;pearl::alphabets::binary::BinaryAlphabet as pearl::alphabets::Alphabet&gt;::states (5 samples, 0.11%)</title><rect x="8.1664%" y="725" width="0.1113%" height="15" fill="rgb(206,27,48)" fg:x="367" fg:w="5"/><text x="8.4164%" y="735.50"></text></g><g><title>&lt;pearl::alphabets::binary::BinaryIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.29%)</title><rect x="8.2777%" y="725" width="0.2893%" height="15" fill="rgb(225,35,8)" fg:x="372" fg:w="13"/><text x="8.5277%" y="735.50"></text></g><g><title>alloc::fmt::format (4 samples, 0.09%)</title><rect x="8.5670%" y="725" width="0.0890%" height="15" fill="rgb(250,213,24)" fg:x="385" fg:w="4"/><text x="8.8170%" y="735.50"></text></g><g><title>pearl::markov::message_bank::MessageRefMut::eval_state_mut (6 samples, 0.13%)</title><rect x="8.6560%" y="725" width="0.1335%" height="15" fill="rgb(247,123,22)" fg:x="389" fg:w="6"/><text x="8.9060%" y="735.50"></text></g><g><title>[libc-2.27.so] (30 samples, 0.67%)</title><rect x="8.1664%" y="741" width="0.6676%" height="15" fill="rgb(231,138,38)" fg:x="367" fg:w="30"/><text x="8.4164%" y="751.50"></text></g><g><title>pearl::utils::functions::logsumexp (2 samples, 0.04%)</title><rect x="8.7895%" y="725" width="0.0445%" height="15" fill="rgb(231,145,46)" fg:x="395" fg:w="2"/><text x="9.0395%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="741" width="0.0223%" height="15" fill="rgb(251,118,11)" fg:x="397" fg:w="1"/><text x="9.0840%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="725" width="0.0223%" height="15" fill="rgb(217,147,25)" fg:x="397" fg:w="1"/><text x="9.0840%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="709" width="0.0223%" height="15" fill="rgb(247,81,37)" fg:x="397" fg:w="1"/><text x="9.0840%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="693" width="0.0223%" height="15" fill="rgb(209,12,38)" fg:x="397" fg:w="1"/><text x="9.0840%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="677" width="0.0223%" height="15" fill="rgb(227,1,9)" fg:x="397" fg:w="1"/><text x="9.0840%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="661" width="0.0223%" height="15" fill="rgb(248,47,43)" fg:x="397" fg:w="1"/><text x="9.0840%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="645" width="0.0223%" height="15" fill="rgb(221,10,30)" fg:x="397" fg:w="1"/><text x="9.0840%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="629" width="0.0223%" height="15" fill="rgb(210,229,1)" fg:x="397" fg:w="1"/><text x="9.0840%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="613" width="0.0223%" height="15" fill="rgb(222,148,37)" fg:x="397" fg:w="1"/><text x="9.0840%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="8.8340%" y="597" width="0.0223%" height="15" fill="rgb(234,67,33)" fg:x="397" fg:w="1"/><text x="9.0840%" y="607.50"></text></g><g><title>__GI___exp (3 samples, 0.07%)</title><rect x="8.8563%" y="741" width="0.0668%" height="15" fill="rgb(247,98,35)" fg:x="398" fg:w="3"/><text x="9.1063%" y="751.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="8.9230%" y="741" width="0.0223%" height="15" fill="rgb(247,138,52)" fg:x="401" fg:w="1"/><text x="9.1730%" y="751.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.09%)</title><rect x="8.9453%" y="741" width="0.0890%" height="15" fill="rgb(213,79,30)" fg:x="402" fg:w="4"/><text x="9.1953%" y="751.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (5 samples, 0.11%)</title><rect x="9.0343%" y="741" width="0.1113%" height="15" fill="rgb(246,177,23)" fg:x="406" fg:w="5"/><text x="9.2843%" y="751.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (5 samples, 0.11%)</title><rect x="9.0343%" y="725" width="0.1113%" height="15" fill="rgb(230,62,27)" fg:x="406" fg:w="5"/><text x="9.2843%" y="735.50"></text></g><g><title>__ieee754_exp_fma (4 samples, 0.09%)</title><rect x="9.1455%" y="741" width="0.0890%" height="15" fill="rgb(216,154,8)" fg:x="411" fg:w="4"/><text x="9.3955%" y="751.50"></text></g><g><title>__ieee754_log_fma (9 samples, 0.20%)</title><rect x="9.2345%" y="741" width="0.2003%" height="15" fill="rgb(244,35,45)" fg:x="415" fg:w="9"/><text x="9.4845%" y="751.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="9.4348%" y="741" width="0.0445%" height="15" fill="rgb(251,115,12)" fg:x="424" fg:w="2"/><text x="9.6848%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.04%)</title><rect x="9.4348%" y="725" width="0.0445%" height="15" fill="rgb(240,54,50)" fg:x="424" fg:w="2"/><text x="9.6848%" y="735.50"></text></g><g><title>core::fmt::Formatter::debug_upper_hex (5 samples, 0.11%)</title><rect x="9.4793%" y="741" width="0.1113%" height="15" fill="rgb(233,84,52)" fg:x="426" fg:w="5"/><text x="9.7293%" y="751.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (6 samples, 0.13%)</title><rect x="9.5906%" y="741" width="0.1335%" height="15" fill="rgb(207,117,47)" fg:x="431" fg:w="6"/><text x="9.8406%" y="751.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Debug for u32&gt;::fmt (8 samples, 0.18%)</title><rect x="9.7241%" y="741" width="0.1780%" height="15" fill="rgb(249,43,39)" fg:x="437" fg:w="8"/><text x="9.9741%" y="751.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (14 samples, 0.31%)</title><rect x="9.9021%" y="741" width="0.3115%" height="15" fill="rgb(209,38,44)" fg:x="445" fg:w="14"/><text x="10.1521%" y="751.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.18%)</title><rect x="10.0356%" y="725" width="0.1780%" height="15" fill="rgb(236,212,23)" fg:x="451" fg:w="8"/><text x="10.2856%" y="735.50"></text></g><g><title>core::fmt::write (26 samples, 0.58%)</title><rect x="10.2136%" y="741" width="0.5785%" height="15" fill="rgb(242,79,21)" fg:x="459" fg:w="26"/><text x="10.4636%" y="751.50"></text></g><g><title>hashbrown::map::make_hash (57 samples, 1.27%)</title><rect x="10.7922%" y="741" width="1.2684%" height="15" fill="rgb(211,96,35)" fg:x="485" fg:w="57"/><text x="11.0422%" y="751.50"></text></g><g><title>pearl::markov::MarkovRandomField&lt;X,NP,EP&gt;::belief_propagation (31 samples, 0.69%)</title><rect x="12.0605%" y="741" width="0.6898%" height="15" fill="rgb(253,215,40)" fg:x="542" fg:w="31"/><text x="12.3105%" y="751.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message (38 samples, 0.85%)</title><rect x="12.7503%" y="741" width="0.8456%" height="15" fill="rgb(211,81,21)" fg:x="573" fg:w="38"/><text x="13.0003%" y="751.50"></text></g><g><title>pearl::markov::message_bank::MessageRef::eval_state (4 samples, 0.09%)</title><rect x="13.5959%" y="741" width="0.0890%" height="15" fill="rgb(208,190,38)" fg:x="611" fg:w="4"/><text x="13.8459%" y="751.50"></text></g><g><title>[unknown] (344 samples, 7.65%)</title><rect x="6.0525%" y="757" width="7.6547%" height="15" fill="rgb(235,213,38)" fg:x="272" fg:w="344"/><text x="6.3025%" y="767.50">[unknown]</text></g><g><title>pearl::utils::functions::logsumexp (1 samples, 0.02%)</title><rect x="13.6849%" y="741" width="0.0223%" height="15" fill="rgb(237,122,38)" fg:x="615" fg:w="1"/><text x="13.9349%" y="751.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (48 samples, 1.07%)</title><rect x="13.7072%" y="741" width="1.0681%" height="15" fill="rgb(244,218,35)" fg:x="616" fg:w="48"/><text x="13.9572%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (16 samples, 0.36%)</title><rect x="14.4192%" y="725" width="0.3560%" height="15" fill="rgb(240,68,47)" fg:x="648" fg:w="16"/><text x="14.6692%" y="735.50"></text></g><g><title>alloc::string::String::push_str (16 samples, 0.36%)</title><rect x="14.4192%" y="709" width="0.3560%" height="15" fill="rgb(210,16,53)" fg:x="648" fg:w="16"/><text x="14.6692%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (16 samples, 0.36%)</title><rect x="14.4192%" y="693" width="0.3560%" height="15" fill="rgb(235,124,12)" fg:x="648" fg:w="16"/><text x="14.6692%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.36%)</title><rect x="14.4192%" y="677" width="0.3560%" height="15" fill="rgb(224,169,11)" fg:x="648" fg:w="16"/><text x="14.6692%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 0.36%)</title><rect x="14.4192%" y="661" width="0.3560%" height="15" fill="rgb(250,166,2)" fg:x="648" fg:w="16"/><text x="14.6692%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.36%)</title><rect x="14.4192%" y="645" width="0.3560%" height="15" fill="rgb(242,216,29)" fg:x="648" fg:w="16"/><text x="14.6692%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.20%)</title><rect x="14.7753%" y="741" width="0.2003%" height="15" fill="rgb(230,116,27)" fg:x="664" fg:w="9"/><text x="15.0253%" y="751.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (73 samples, 1.62%)</title><rect x="13.7072%" y="757" width="1.6244%" height="15" fill="rgb(228,99,48)" fg:x="616" fg:w="73"/><text x="13.9572%" y="767.50"></text></g><g><title>core::fmt::write (16 samples, 0.36%)</title><rect x="14.9755%" y="741" width="0.3560%" height="15" fill="rgb(253,11,6)" fg:x="673" fg:w="16"/><text x="15.2255%" y="751.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="32.2875%" y="453" width="0.0223%" height="15" fill="rgb(247,143,39)" fg:x="1451" fg:w="1"/><text x="32.5375%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.04%)</title><rect x="32.2875%" y="469" width="0.0445%" height="15" fill="rgb(236,97,10)" fg:x="1451" fg:w="2"/><text x="32.5375%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.02%)</title><rect x="32.3097%" y="453" width="0.0223%" height="15" fill="rgb(233,208,19)" fg:x="1452" fg:w="1"/><text x="32.5597%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.02%)</title><rect x="32.3097%" y="437" width="0.0223%" height="15" fill="rgb(216,164,2)" fg:x="1452" fg:w="1"/><text x="32.5597%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="32.3097%" y="421" width="0.0223%" height="15" fill="rgb(220,129,5)" fg:x="1452" fg:w="1"/><text x="32.5597%" y="431.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (356 samples, 7.92%)</title><rect x="38.8073%" y="453" width="7.9217%" height="15" fill="rgb(242,17,10)" fg:x="1744" fg:w="356"/><text x="39.0573%" y="463.50">&lt;petgraph::..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7067%" y="437" width="0.0223%" height="15" fill="rgb(242,107,0)" fg:x="2099" fg:w="1"/><text x="46.9567%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7067%" y="421" width="0.0223%" height="15" fill="rgb(251,28,31)" fg:x="2099" fg:w="1"/><text x="46.9567%" y="431.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message (960 samples, 21.36%)</title><rect x="25.4339%" y="485" width="21.3618%" height="15" fill="rgb(233,223,10)" fg:x="1143" fg:w="960"/><text x="25.6839%" y="495.50">pearl::markov::message_bank::Messa..</text></g><g><title>hashbrown::map::make_hash (650 samples, 14.46%)</title><rect x="32.3320%" y="469" width="14.4637%" height="15" fill="rgb(215,21,27)" fg:x="1453" fg:w="650"/><text x="32.5820%" y="479.50">hashbrown::map::make_h..</text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="453" width="0.0668%" height="15" fill="rgb(232,23,21)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="463.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="437" width="0.0668%" height="15" fill="rgb(244,5,23)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="421" width="0.0668%" height="15" fill="rgb(226,81,46)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="431.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="405" width="0.0668%" height="15" fill="rgb(247,70,30)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="415.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="389" width="0.0668%" height="15" fill="rgb(212,68,19)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="373" width="0.0668%" height="15" fill="rgb(240,187,13)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="357" width="0.0668%" height="15" fill="rgb(223,113,26)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="46.7290%" y="341" width="0.0668%" height="15" fill="rgb(206,192,2)" fg:x="2100" fg:w="3"/><text x="46.9790%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="325" width="0.0223%" height="15" fill="rgb(241,108,4)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="309" width="0.0223%" height="15" fill="rgb(247,173,49)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="293" width="0.0223%" height="15" fill="rgb(224,114,35)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="277" width="0.0223%" height="15" fill="rgb(245,159,27)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="261" width="0.0223%" height="15" fill="rgb(245,172,44)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="46.7735%" y="245" width="0.0223%" height="15" fill="rgb(236,23,11)" fg:x="2102" fg:w="1"/><text x="47.0235%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,114 samples, 24.79%)</title><rect x="22.1851%" y="501" width="24.7886%" height="15" fill="rgb(205,117,38)" fg:x="997" fg:w="1114"/><text x="22.4351%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>pearl::markov::message_bank::MessageRef::eval_state (8 samples, 0.18%)</title><rect x="46.7957%" y="485" width="0.1780%" height="15" fill="rgb(237,72,25)" fg:x="2103" fg:w="8"/><text x="47.0457%" y="495.50"></text></g><g><title>&lt;pearl::alphabets::binary::BinaryAlphabet as pearl::alphabets::Alphabet&gt;::states (1 samples, 0.02%)</title><rect x="46.9737%" y="501" width="0.0223%" height="15" fill="rgb(244,70,9)" fg:x="2111" fg:w="1"/><text x="47.2237%" y="511.50"></text></g><g><title>&lt;pearl::alphabets::binary::BinaryIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.53%)</title><rect x="46.9960%" y="501" width="0.5340%" height="15" fill="rgb(217,125,39)" fg:x="2112" fg:w="24"/><text x="47.2460%" y="511.50"></text></g><g><title>&lt;pearl::alphabets::binary::Psi as pearl::markov::potentials::EdgePotential&gt;::psi (41 samples, 0.91%)</title><rect x="47.5300%" y="501" width="0.9123%" height="15" fill="rgb(235,36,10)" fg:x="2136" fg:w="41"/><text x="47.7800%" y="511.50"></text></g><g><title>@plt (14 samples, 0.31%)</title><rect x="48.4424%" y="501" width="0.3115%" height="15" fill="rgb(251,123,47)" fg:x="2177" fg:w="14"/><text x="48.6924%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="501" width="0.0223%" height="15" fill="rgb(221,13,13)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="485" width="0.0223%" height="15" fill="rgb(238,131,9)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="469" width="0.0223%" height="15" fill="rgb(211,50,8)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="453" width="0.0223%" height="15" fill="rgb(245,182,24)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="437" width="0.0223%" height="15" fill="rgb(242,14,37)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="421" width="0.0223%" height="15" fill="rgb(246,228,12)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="405" width="0.0223%" height="15" fill="rgb(213,55,15)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="48.7539%" y="389" width="0.0223%" height="15" fill="rgb(209,9,3)" fg:x="2191" fg:w="1"/><text x="49.0039%" y="399.50"></text></g><g><title>__GI___exp (1 samples, 0.02%)</title><rect x="48.7761%" y="501" width="0.0223%" height="15" fill="rgb(230,59,30)" fg:x="2192" fg:w="1"/><text x="49.0261%" y="511.50"></text></g><g><title>__ieee754_exp_fma (1 samples, 0.02%)</title><rect x="48.7761%" y="485" width="0.0223%" height="15" fill="rgb(209,121,21)" fg:x="2192" fg:w="1"/><text x="49.0261%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="485" width="0.0223%" height="15" fill="rgb(220,109,13)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="469" width="0.0223%" height="15" fill="rgb(232,18,1)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="453" width="0.0223%" height="15" fill="rgb(215,41,42)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="437" width="0.0223%" height="15" fill="rgb(224,123,36)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="421" width="0.0223%" height="15" fill="rgb(240,125,3)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="405" width="0.0223%" height="15" fill="rgb(205,98,50)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="49.3102%" y="389" width="0.0223%" height="15" fill="rgb(205,185,37)" fg:x="2216" fg:w="1"/><text x="49.5602%" y="399.50"></text></g><g><title>__GI___libc_free (58 samples, 1.29%)</title><rect x="48.7984%" y="501" width="1.2906%" height="15" fill="rgb(238,207,15)" fg:x="2193" fg:w="58"/><text x="49.0484%" y="511.50"></text></g><g><title>_int_free (34 samples, 0.76%)</title><rect x="49.3324%" y="485" width="0.7566%" height="15" fill="rgb(213,199,42)" fg:x="2217" fg:w="34"/><text x="49.5824%" y="495.50"></text></g><g><title>tcache_put (12 samples, 0.27%)</title><rect x="49.8220%" y="469" width="0.2670%" height="15" fill="rgb(235,201,11)" fg:x="2239" fg:w="12"/><text x="50.0720%" y="479.50"></text></g><g><title>__ieee754_log_fma (368 samples, 8.19%)</title><rect x="50.0890%" y="501" width="8.1887%" height="15" fill="rgb(207,46,11)" fg:x="2251" fg:w="368"/><text x="50.3390%" y="511.50">__ieee754_l..</text></g><g><title>__log (7 samples, 0.16%)</title><rect x="58.2777%" y="501" width="0.1558%" height="15" fill="rgb(241,35,35)" fg:x="2619" fg:w="7"/><text x="58.5277%" y="511.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.13%)</title><rect x="58.4335%" y="501" width="0.1335%" height="15" fill="rgb(243,32,47)" fg:x="2626" fg:w="6"/><text x="58.6835%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.13%)</title><rect x="58.4335%" y="485" width="0.1335%" height="15" fill="rgb(247,202,23)" fg:x="2626" fg:w="6"/><text x="58.6835%" y="495.50"></text></g><g><title>__rust_dealloc (2 samples, 0.04%)</title><rect x="58.5670%" y="501" width="0.0445%" height="15" fill="rgb(219,102,11)" fg:x="2632" fg:w="2"/><text x="58.8170%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="357" width="0.0223%" height="15" fill="rgb(243,110,44)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="341" width="0.0223%" height="15" fill="rgb(222,74,54)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="325" width="0.0223%" height="15" fill="rgb(216,99,12)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="309" width="0.0223%" height="15" fill="rgb(226,22,26)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="293" width="0.0223%" height="15" fill="rgb(217,163,10)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="277" width="0.0223%" height="15" fill="rgb(213,25,53)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="261" width="0.0223%" height="15" fill="rgb(252,105,26)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="245" width="0.0223%" height="15" fill="rgb(220,39,43)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="229" width="0.0223%" height="15" fill="rgb(229,68,48)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="213" width="0.0223%" height="15" fill="rgb(252,8,32)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="197" width="0.0223%" height="15" fill="rgb(223,20,43)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="181" width="0.0223%" height="15" fill="rgb(229,81,49)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.1455%" y="165" width="0.0223%" height="15" fill="rgb(236,28,36)" fg:x="2658" fg:w="1"/><text x="59.3955%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="341" width="0.0223%" height="15" fill="rgb(249,185,26)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="325" width="0.0223%" height="15" fill="rgb(249,174,33)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="309" width="0.0223%" height="15" fill="rgb(233,201,37)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="293" width="0.0223%" height="15" fill="rgb(221,78,26)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="277" width="0.0223%" height="15" fill="rgb(250,127,30)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="261" width="0.0223%" height="15" fill="rgb(230,49,44)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="245" width="0.0223%" height="15" fill="rgb(229,67,23)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="229" width="0.0223%" height="15" fill="rgb(249,83,47)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="213" width="0.0223%" height="15" fill="rgb(215,43,3)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="197" width="0.0223%" height="15" fill="rgb(238,154,13)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="181" width="0.0223%" height="15" fill="rgb(219,56,2)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="165" width="0.0223%" height="15" fill="rgb(233,0,4)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="149" width="0.0223%" height="15" fill="rgb(235,30,7)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="60.3249%" y="133" width="0.0223%" height="15" fill="rgb(250,79,13)" fg:x="2711" fg:w="1"/><text x="60.5749%" y="143.50"></text></g><g><title>__GI___libc_malloc (82 samples, 1.82%)</title><rect x="59.1678%" y="357" width="1.8247%" height="15" fill="rgb(211,146,34)" fg:x="2659" fg:w="82"/><text x="59.4178%" y="367.50">_..</text></g><g><title>tcache_get (29 samples, 0.65%)</title><rect x="60.3471%" y="341" width="0.6453%" height="15" fill="rgb(228,22,38)" fg:x="2712" fg:w="29"/><text x="60.5971%" y="351.50"></text></g><g><title>__rdl_alloc (10 samples, 0.22%)</title><rect x="60.9924%" y="357" width="0.2225%" height="15" fill="rgb(235,168,5)" fg:x="2741" fg:w="10"/><text x="61.2424%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.22%)</title><rect x="60.9924%" y="341" width="0.2225%" height="15" fill="rgb(221,155,16)" fg:x="2741" fg:w="10"/><text x="61.2424%" y="351.50"></text></g><g><title>alloc::string::String::with_capacity (114 samples, 2.54%)</title><rect x="58.7895%" y="485" width="2.5367%" height="15" fill="rgb(215,215,53)" fg:x="2642" fg:w="114"/><text x="59.0395%" y="495.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (108 samples, 2.40%)</title><rect x="58.9230%" y="469" width="2.4032%" height="15" fill="rgb(223,4,10)" fg:x="2648" fg:w="108"/><text x="59.1730%" y="479.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (108 samples, 2.40%)</title><rect x="58.9230%" y="453" width="2.4032%" height="15" fill="rgb(234,103,6)" fg:x="2648" fg:w="108"/><text x="59.1730%" y="463.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (108 samples, 2.40%)</title><rect x="58.9230%" y="437" width="2.4032%" height="15" fill="rgb(227,97,0)" fg:x="2648" fg:w="108"/><text x="59.1730%" y="447.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (108 samples, 2.40%)</title><rect x="58.9230%" y="421" width="2.4032%" height="15" fill="rgb(234,150,53)" fg:x="2648" fg:w="108"/><text x="59.1730%" y="431.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 2.29%)</title><rect x="59.0343%" y="405" width="2.2919%" height="15" fill="rgb(228,201,54)" fg:x="2653" fg:w="103"/><text x="59.2843%" y="415.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 2.29%)</title><rect x="59.0343%" y="389" width="2.2919%" height="15" fill="rgb(222,22,37)" fg:x="2653" fg:w="103"/><text x="59.2843%" y="399.50">a..</text></g><g><title>alloc::alloc::alloc (101 samples, 2.25%)</title><rect x="59.0788%" y="373" width="2.2474%" height="15" fill="rgb(237,53,32)" fg:x="2655" fg:w="101"/><text x="59.3288%" y="383.50">a..</text></g><g><title>__rust_alloc (5 samples, 0.11%)</title><rect x="61.2150%" y="357" width="0.1113%" height="15" fill="rgb(233,25,53)" fg:x="2751" fg:w="5"/><text x="61.4650%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.40%)</title><rect x="61.5265%" y="405" width="0.4005%" height="15" fill="rgb(210,40,34)" fg:x="2765" fg:w="18"/><text x="61.7765%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (21 samples, 0.47%)</title><rect x="61.5265%" y="469" width="0.4673%" height="15" fill="rgb(241,220,44)" fg:x="2765" fg:w="21"/><text x="61.7765%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (21 samples, 0.47%)</title><rect x="61.5265%" y="453" width="0.4673%" height="15" fill="rgb(235,28,35)" fg:x="2765" fg:w="21"/><text x="61.7765%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.47%)</title><rect x="61.5265%" y="437" width="0.4673%" height="15" fill="rgb(210,56,17)" fg:x="2765" fg:w="21"/><text x="61.7765%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.47%)</title><rect x="61.5265%" y="421" width="0.4673%" height="15" fill="rgb(224,130,29)" fg:x="2765" fg:w="21"/><text x="61.7765%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.07%)</title><rect x="61.9270%" y="405" width="0.0668%" height="15" fill="rgb(235,212,8)" fg:x="2783" fg:w="3"/><text x="62.1770%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (3 samples, 0.07%)</title><rect x="61.9270%" y="389" width="0.0668%" height="15" fill="rgb(223,33,50)" fg:x="2783" fg:w="3"/><text x="62.1770%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.02%)</title><rect x="61.9938%" y="469" width="0.0223%" height="15" fill="rgb(219,149,13)" fg:x="2786" fg:w="1"/><text x="62.2438%" y="479.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (33 samples, 0.73%)</title><rect x="61.3262%" y="485" width="0.7343%" height="15" fill="rgb(250,156,29)" fg:x="2756" fg:w="33"/><text x="61.5762%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.04%)</title><rect x="62.0160%" y="469" width="0.0445%" height="15" fill="rgb(216,193,19)" fg:x="2787" fg:w="2"/><text x="62.2660%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.04%)</title><rect x="62.0160%" y="453" width="0.0445%" height="15" fill="rgb(216,135,14)" fg:x="2787" fg:w="2"/><text x="62.2660%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.04%)</title><rect x="62.0160%" y="437" width="0.0445%" height="15" fill="rgb(241,47,5)" fg:x="2787" fg:w="2"/><text x="62.2660%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.04%)</title><rect x="62.0160%" y="421" width="0.0445%" height="15" fill="rgb(233,42,35)" fg:x="2787" fg:w="2"/><text x="62.2660%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 0.58%)</title><rect x="63.9074%" y="357" width="0.5785%" height="15" fill="rgb(231,13,6)" fg:x="2872" fg:w="26"/><text x="64.1574%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.42%)</title><rect x="64.0632%" y="341" width="0.4228%" height="15" fill="rgb(207,181,40)" fg:x="2879" fg:w="19"/><text x="64.3132%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (16 samples, 0.36%)</title><rect x="64.1300%" y="325" width="0.3560%" height="15" fill="rgb(254,173,49)" fg:x="2882" fg:w="16"/><text x="64.3800%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11 samples, 0.24%)</title><rect x="64.2412%" y="309" width="0.2448%" height="15" fill="rgb(221,1,38)" fg:x="2887" fg:w="11"/><text x="64.4912%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (116 samples, 2.58%)</title><rect x="64.4860%" y="357" width="2.5812%" height="15" fill="rgb(206,124,46)" fg:x="2898" fg:w="116"/><text x="64.7360%" y="367.50">co..</text></g><g><title>__memmove_avx_unaligned_erms (106 samples, 2.36%)</title><rect x="64.7085%" y="341" width="2.3587%" height="15" fill="rgb(249,21,11)" fg:x="2908" fg:w="106"/><text x="64.9585%" y="351.50">_..</text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="325" width="0.0668%" height="15" fill="rgb(222,201,40)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="309" width="0.0668%" height="15" fill="rgb(235,61,29)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="293" width="0.0668%" height="15" fill="rgb(219,207,3)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="277" width="0.0668%" height="15" fill="rgb(222,56,46)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="261" width="0.0668%" height="15" fill="rgb(239,76,54)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="245" width="0.0668%" height="15" fill="rgb(231,124,27)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="229" width="0.0668%" height="15" fill="rgb(249,195,6)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="67.0004%" y="213" width="0.0668%" height="15" fill="rgb(237,174,47)" fg:x="3011" fg:w="3"/><text x="67.2504%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="67.0227%" y="197" width="0.0445%" height="15" fill="rgb(206,201,31)" fg:x="3012" fg:w="2"/><text x="67.2727%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="67.0227%" y="181" width="0.0445%" height="15" fill="rgb(231,57,52)" fg:x="3012" fg:w="2"/><text x="67.2727%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (169 samples, 3.76%)</title><rect x="63.4179%" y="453" width="3.7606%" height="15" fill="rgb(248,177,22)" fg:x="2850" fg:w="169"/><text x="63.6679%" y="463.50">&lt;&amp;mu..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (148 samples, 3.29%)</title><rect x="63.8852%" y="437" width="3.2933%" height="15" fill="rgb(215,211,37)" fg:x="2871" fg:w="148"/><text x="64.1352%" y="447.50">&lt;al..</text></g><g><title>alloc::string::String::push_str (148 samples, 3.29%)</title><rect x="63.8852%" y="421" width="3.2933%" height="15" fill="rgb(241,128,51)" fg:x="2871" fg:w="148"/><text x="64.1352%" y="431.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (148 samples, 3.29%)</title><rect x="63.8852%" y="405" width="3.2933%" height="15" fill="rgb(227,165,31)" fg:x="2871" fg:w="148"/><text x="64.1352%" y="415.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (148 samples, 3.29%)</title><rect x="63.8852%" y="389" width="3.2933%" height="15" fill="rgb(228,167,24)" fg:x="2871" fg:w="148"/><text x="64.1352%" y="399.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (148 samples, 3.29%)</title><rect x="63.8852%" y="373" width="3.2933%" height="15" fill="rgb(228,143,12)" fg:x="2871" fg:w="148"/><text x="64.1352%" y="383.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.11%)</title><rect x="67.0672%" y="357" width="0.1113%" height="15" fill="rgb(249,149,8)" fg:x="3014" fg:w="5"/><text x="67.3172%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.11%)</title><rect x="67.0672%" y="341" width="0.1113%" height="15" fill="rgb(243,35,44)" fg:x="3014" fg:w="5"/><text x="67.3172%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="67.1785%" y="453" width="0.0668%" height="15" fill="rgb(246,89,9)" fg:x="3019" fg:w="3"/><text x="67.4285%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3 samples, 0.07%)</title><rect x="67.1785%" y="437" width="0.0668%" height="15" fill="rgb(233,213,13)" fg:x="3019" fg:w="3"/><text x="67.4285%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.45%)</title><rect x="74.1656%" y="309" width="0.4450%" height="15" fill="rgb(233,141,41)" fg:x="3333" fg:w="20"/><text x="74.4156%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.45%)</title><rect x="74.1656%" y="293" width="0.4450%" height="15" fill="rgb(239,167,4)" fg:x="3333" fg:w="20"/><text x="74.4156%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.40%)</title><rect x="74.2101%" y="277" width="0.4005%" height="15" fill="rgb(209,217,16)" fg:x="3335" fg:w="18"/><text x="74.4601%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76 samples, 1.69%)</title><rect x="74.6106%" y="309" width="1.6911%" height="15" fill="rgb(219,88,35)" fg:x="3353" fg:w="76"/><text x="74.8606%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (60 samples, 1.34%)</title><rect x="74.9666%" y="293" width="1.3351%" height="15" fill="rgb(220,193,23)" fg:x="3369" fg:w="60"/><text x="75.2166%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (132 samples, 2.94%)</title><rect x="73.3867%" y="405" width="2.9372%" height="15" fill="rgb(230,90,52)" fg:x="3298" fg:w="132"/><text x="73.6367%" y="415.50">&lt;&amp;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (102 samples, 2.27%)</title><rect x="74.0543%" y="389" width="2.2697%" height="15" fill="rgb(252,106,19)" fg:x="3328" fg:w="102"/><text x="74.3043%" y="399.50">&lt;..</text></g><g><title>alloc::string::String::push_str (102 samples, 2.27%)</title><rect x="74.0543%" y="373" width="2.2697%" height="15" fill="rgb(206,74,20)" fg:x="3328" fg:w="102"/><text x="74.3043%" y="383.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (102 samples, 2.27%)</title><rect x="74.0543%" y="357" width="2.2697%" height="15" fill="rgb(230,138,44)" fg:x="3328" fg:w="102"/><text x="74.3043%" y="367.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (102 samples, 2.27%)</title><rect x="74.0543%" y="341" width="2.2697%" height="15" fill="rgb(235,182,43)" fg:x="3328" fg:w="102"/><text x="74.3043%" y="351.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (102 samples, 2.27%)</title><rect x="74.0543%" y="325" width="2.2697%" height="15" fill="rgb(242,16,51)" fg:x="3328" fg:w="102"/><text x="74.3043%" y="335.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="76.3017%" y="309" width="0.0223%" height="15" fill="rgb(248,9,4)" fg:x="3429" fg:w="1"/><text x="76.5517%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="76.3017%" y="293" width="0.0223%" height="15" fill="rgb(210,31,22)" fg:x="3429" fg:w="1"/><text x="76.5517%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.20%)</title><rect x="76.3240%" y="405" width="0.2003%" height="15" fill="rgb(239,54,39)" fg:x="3430" fg:w="9"/><text x="76.5740%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.20%)</title><rect x="76.3240%" y="389" width="0.2003%" height="15" fill="rgb(230,99,41)" fg:x="3430" fg:w="9"/><text x="76.5740%" y="399.50"></text></g><g><title>core::fmt::Formatter::new (19 samples, 0.42%)</title><rect x="76.5243%" y="405" width="0.4228%" height="15" fill="rgb(253,106,12)" fg:x="3439" fg:w="19"/><text x="76.7743%" y="415.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Debug for u32&gt;::fmt (32 samples, 0.71%)</title><rect x="76.9470%" y="405" width="0.7121%" height="15" fill="rgb(213,46,41)" fg:x="3458" fg:w="32"/><text x="77.1970%" y="415.50"></text></g><g><title>core::fmt::Formatter::debug_lower_hex (7 samples, 0.16%)</title><rect x="77.5033%" y="389" width="0.1558%" height="15" fill="rgb(215,133,35)" fg:x="3483" fg:w="7"/><text x="77.7533%" y="399.50"></text></g><g><title>&lt;u32 as core::fmt::num::DisplayInt&gt;::to_u64 (1 samples, 0.02%)</title><rect x="77.8371%" y="389" width="0.0223%" height="15" fill="rgb(213,28,5)" fg:x="3498" fg:w="1"/><text x="78.0871%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 0.16%)</title><rect x="79.0610%" y="277" width="0.1558%" height="15" fill="rgb(215,77,49)" fg:x="3553" fg:w="7"/><text x="79.3110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.16%)</title><rect x="79.0610%" y="261" width="0.1558%" height="15" fill="rgb(248,100,22)" fg:x="3553" fg:w="7"/><text x="79.3110%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (6 samples, 0.13%)</title><rect x="79.0832%" y="245" width="0.1335%" height="15" fill="rgb(208,67,9)" fg:x="3554" fg:w="6"/><text x="79.3332%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (6 samples, 0.13%)</title><rect x="79.0832%" y="229" width="0.1335%" height="15" fill="rgb(219,133,21)" fg:x="3554" fg:w="6"/><text x="79.3332%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (45 samples, 1.00%)</title><rect x="78.7494%" y="373" width="1.0013%" height="15" fill="rgb(246,46,29)" fg:x="3539" fg:w="45"/><text x="78.9994%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (31 samples, 0.69%)</title><rect x="79.0610%" y="357" width="0.6898%" height="15" fill="rgb(246,185,52)" fg:x="3553" fg:w="31"/><text x="79.3110%" y="367.50"></text></g><g><title>alloc::string::String::push_str (31 samples, 0.69%)</title><rect x="79.0610%" y="341" width="0.6898%" height="15" fill="rgb(252,136,11)" fg:x="3553" fg:w="31"/><text x="79.3110%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 0.69%)</title><rect x="79.0610%" y="325" width="0.6898%" height="15" fill="rgb(219,138,53)" fg:x="3553" fg:w="31"/><text x="79.3110%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 0.69%)</title><rect x="79.0610%" y="309" width="0.6898%" height="15" fill="rgb(211,51,23)" fg:x="3553" fg:w="31"/><text x="79.3110%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (31 samples, 0.69%)</title><rect x="79.0610%" y="293" width="0.6898%" height="15" fill="rgb(247,221,28)" fg:x="3553" fg:w="31"/><text x="79.3110%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.53%)</title><rect x="79.2167%" y="277" width="0.5340%" height="15" fill="rgb(251,222,45)" fg:x="3560" fg:w="24"/><text x="79.4667%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.47%)</title><rect x="79.2835%" y="261" width="0.4673%" height="15" fill="rgb(217,162,53)" fg:x="3563" fg:w="21"/><text x="79.5335%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="245" width="0.0223%" height="15" fill="rgb(229,93,14)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="229" width="0.0223%" height="15" fill="rgb(209,67,49)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="213" width="0.0223%" height="15" fill="rgb(213,87,29)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="197" width="0.0223%" height="15" fill="rgb(205,151,52)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="181" width="0.0223%" height="15" fill="rgb(253,215,39)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="165" width="0.0223%" height="15" fill="rgb(221,220,41)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="149" width="0.0223%" height="15" fill="rgb(218,133,21)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="133" width="0.0223%" height="15" fill="rgb(221,193,43)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="117" width="0.0223%" height="15" fill="rgb(240,128,52)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="101" width="0.0223%" height="15" fill="rgb(253,114,12)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="85" width="0.0223%" height="15" fill="rgb(215,223,47)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="69" width="0.0223%" height="15" fill="rgb(248,225,23)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="53" width="0.0223%" height="15" fill="rgb(250,108,0)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="79.7285%" y="37" width="0.0223%" height="15" fill="rgb(228,208,7)" fg:x="3583" fg:w="1"/><text x="79.9785%" y="47.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (18 samples, 0.40%)</title><rect x="80.3961%" y="357" width="0.4005%" height="15" fill="rgb(244,45,10)" fg:x="3613" fg:w="18"/><text x="80.6461%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral (61 samples, 1.36%)</title><rect x="79.7508%" y="373" width="1.3574%" height="15" fill="rgb(207,125,25)" fg:x="3584" fg:w="61"/><text x="80.0008%" y="383.50"></text></g><g><title>core::fmt::Formatter::sign_plus (14 samples, 0.31%)</title><rect x="80.7966%" y="357" width="0.3115%" height="15" fill="rgb(210,195,18)" fg:x="3631" fg:w="14"/><text x="81.0466%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.20%)</title><rect x="81.1081%" y="373" width="0.2003%" height="15" fill="rgb(249,80,12)" fg:x="3645" fg:w="9"/><text x="81.3581%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="81.3084%" y="373" width="0.0223%" height="15" fill="rgb(221,65,9)" fg:x="3654" fg:w="1"/><text x="81.5584%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (170 samples, 3.78%)</title><rect x="77.6591%" y="405" width="3.7828%" height="15" fill="rgb(235,49,36)" fg:x="3490" fg:w="170"/><text x="77.9091%" y="415.50">core..</text></g><g><title>core::fmt::num::imp::fmt_u64 (161 samples, 3.58%)</title><rect x="77.8594%" y="389" width="3.5826%" height="15" fill="rgb(225,32,20)" fg:x="3499" fg:w="161"/><text x="78.1094%" y="399.50">core..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.11%)</title><rect x="81.3307%" y="373" width="0.1113%" height="15" fill="rgb(215,141,46)" fg:x="3655" fg:w="5"/><text x="81.5807%" y="383.50"></text></g><g><title>core::iter::adapters::zip::zip (5 samples, 0.11%)</title><rect x="81.4419%" y="405" width="0.1113%" height="15" fill="rgb(250,160,47)" fg:x="3660" fg:w="5"/><text x="81.6919%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5 samples, 0.11%)</title><rect x="81.4419%" y="389" width="0.1113%" height="15" fill="rgb(216,222,40)" fg:x="3660" fg:w="5"/><text x="81.6919%" y="399.50"></text></g><g><title>core::cmp::min (5 samples, 0.11%)</title><rect x="81.4419%" y="373" width="0.1113%" height="15" fill="rgb(234,217,39)" fg:x="3660" fg:w="5"/><text x="81.6919%" y="383.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.11%)</title><rect x="81.4419%" y="357" width="0.1113%" height="15" fill="rgb(207,178,40)" fg:x="3660" fg:w="5"/><text x="81.6919%" y="367.50"></text></g><g><title>core::cmp::min_by (5 samples, 0.11%)</title><rect x="81.4419%" y="341" width="0.1113%" height="15" fill="rgb(221,136,13)" fg:x="3660" fg:w="5"/><text x="81.6919%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::fmt::Debug&gt;::fmt (644 samples, 14.33%)</title><rect x="67.2452%" y="453" width="14.3302%" height="15" fill="rgb(249,199,10)" fg:x="3022" fg:w="644"/><text x="67.4952%" y="463.50">&lt;petgraph::graph_impl:..</text></g><g><title>core::fmt::Formatter::write_fmt (614 samples, 13.66%)</title><rect x="67.9128%" y="437" width="13.6627%" height="15" fill="rgb(249,222,13)" fg:x="3052" fg:w="614"/><text x="68.1628%" y="447.50">core::fmt::Formatter:..</text></g><g><title>core::fmt::write (439 samples, 9.77%)</title><rect x="71.8069%" y="421" width="9.7686%" height="15" fill="rgb(244,185,38)" fg:x="3227" fg:w="439"/><text x="72.0569%" y="431.50">core::fmt::wri..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1 samples, 0.02%)</title><rect x="81.5532%" y="405" width="0.0223%" height="15" fill="rgb(236,202,9)" fg:x="3665" fg:w="1"/><text x="81.8032%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="453" width="0.0223%" height="15" fill="rgb(250,229,37)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="437" width="0.0223%" height="15" fill="rgb(206,174,23)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="421" width="0.0223%" height="15" fill="rgb(211,33,43)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="405" width="0.0223%" height="15" fill="rgb(245,58,50)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="389" width="0.0223%" height="15" fill="rgb(244,68,36)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="373" width="0.0223%" height="15" fill="rgb(232,229,15)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.5754%" y="357" width="0.0223%" height="15" fill="rgb(254,30,23)" fg:x="3666" fg:w="1"/><text x="81.8254%" y="367.50"></text></g><g><title>core::fmt::Formatter::new (15 samples, 0.33%)</title><rect x="81.5977%" y="453" width="0.3338%" height="15" fill="rgb(235,160,14)" fg:x="3667" fg:w="15"/><text x="81.8477%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="437" width="0.0223%" height="15" fill="rgb(212,155,44)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="421" width="0.0223%" height="15" fill="rgb(226,2,50)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="405" width="0.0223%" height="15" fill="rgb(234,177,6)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="389" width="0.0223%" height="15" fill="rgb(217,24,9)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="373" width="0.0223%" height="15" fill="rgb(220,13,46)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="357" width="0.0223%" height="15" fill="rgb(239,221,27)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="341" width="0.0223%" height="15" fill="rgb(222,198,25)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="325" width="0.0223%" height="15" fill="rgb(211,99,13)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="309" width="0.0223%" height="15" fill="rgb(232,111,31)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="293" width="0.0223%" height="15" fill="rgb(245,82,37)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="277" width="0.0223%" height="15" fill="rgb(227,149,46)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="261" width="0.0223%" height="15" fill="rgb(218,36,50)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="81.9092%" y="245" width="0.0223%" height="15" fill="rgb(226,80,48)" fg:x="3681" fg:w="1"/><text x="82.1592%" y="255.50"></text></g><g><title>alloc::fmt::format (1,053 samples, 23.43%)</title><rect x="58.6115%" y="501" width="23.4312%" height="15" fill="rgb(238,224,15)" fg:x="2634" fg:w="1053"/><text x="58.8615%" y="511.50">alloc::fmt::format</text></g><g><title>core::fmt::Write::write_fmt (898 samples, 19.98%)</title><rect x="62.0605%" y="485" width="19.9822%" height="15" fill="rgb(241,136,10)" fg:x="2789" fg:w="898"/><text x="62.3105%" y="495.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (891 samples, 19.83%)</title><rect x="62.2163%" y="469" width="19.8264%" height="15" fill="rgb(208,32,45)" fg:x="2796" fg:w="891"/><text x="62.4663%" y="479.50">core::fmt::write</text></g><g><title>core::iter::adapters::zip::zip (5 samples, 0.11%)</title><rect x="81.9315%" y="453" width="0.1113%" height="15" fill="rgb(207,135,9)" fg:x="3682" fg:w="5"/><text x="82.1815%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (5 samples, 0.11%)</title><rect x="81.9315%" y="437" width="0.1113%" height="15" fill="rgb(206,86,44)" fg:x="3682" fg:w="5"/><text x="82.1815%" y="447.50"></text></g><g><title>core::cmp::min (5 samples, 0.11%)</title><rect x="81.9315%" y="421" width="0.1113%" height="15" fill="rgb(245,177,15)" fg:x="3682" fg:w="5"/><text x="82.1815%" y="431.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.11%)</title><rect x="81.9315%" y="405" width="0.1113%" height="15" fill="rgb(206,64,50)" fg:x="3682" fg:w="5"/><text x="82.1815%" y="415.50"></text></g><g><title>core::cmp::min_by (5 samples, 0.11%)</title><rect x="81.9315%" y="389" width="0.1113%" height="15" fill="rgb(234,36,40)" fg:x="3682" fg:w="5"/><text x="82.1815%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1762%" y="485" width="0.0223%" height="15" fill="rgb(213,64,8)" fg:x="3693" fg:w="1"/><text x="82.4262%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.1762%" y="469" width="0.0223%" height="15" fill="rgb(210,75,36)" fg:x="3693" fg:w="1"/><text x="82.4262%" y="479.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message (12 samples, 0.27%)</title><rect x="82.0427%" y="501" width="0.2670%" height="15" fill="rgb(229,88,21)" fg:x="3687" fg:w="12"/><text x="82.2927%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.11%)</title><rect x="82.1985%" y="485" width="0.1113%" height="15" fill="rgb(252,204,47)" fg:x="3694" fg:w="5"/><text x="82.4485%" y="495.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (4 samples, 0.09%)</title><rect x="82.2207%" y="469" width="0.0890%" height="15" fill="rgb(208,77,27)" fg:x="3695" fg:w="4"/><text x="82.4707%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="453" width="0.0223%" height="15" fill="rgb(221,76,26)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="437" width="0.0223%" height="15" fill="rgb(225,139,18)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="421" width="0.0223%" height="15" fill="rgb(230,137,11)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="405" width="0.0223%" height="15" fill="rgb(212,28,1)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="389" width="0.0223%" height="15" fill="rgb(248,164,17)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="373" width="0.0223%" height="15" fill="rgb(222,171,42)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="357" width="0.0223%" height="15" fill="rgb(243,84,45)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="82.2875%" y="341" width="0.0223%" height="15" fill="rgb(252,49,23)" fg:x="3698" fg:w="1"/><text x="82.5375%" y="351.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="84.3792%" y="469" width="0.0223%" height="15" fill="rgb(215,19,7)" fg:x="3792" fg:w="1"/><text x="84.6292%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.4682%" y="437" width="0.0223%" height="15" fill="rgb(238,81,41)" fg:x="3796" fg:w="1"/><text x="84.7182%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="84.4682%" y="421" width="0.0223%" height="15" fill="rgb(210,199,37)" fg:x="3796" fg:w="1"/><text x="84.7182%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.18%)</title><rect x="84.3347%" y="485" width="0.1780%" height="15" fill="rgb(244,192,49)" fg:x="3790" fg:w="8"/><text x="84.5847%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.11%)</title><rect x="84.4014%" y="469" width="0.1113%" height="15" fill="rgb(226,211,11)" fg:x="3793" fg:w="5"/><text x="84.6514%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.09%)</title><rect x="84.4237%" y="453" width="0.0890%" height="15" fill="rgb(236,162,54)" fg:x="3794" fg:w="4"/><text x="84.6737%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="84.4904%" y="437" width="0.0223%" height="15" fill="rgb(220,229,9)" fg:x="3797" fg:w="1"/><text x="84.7404%" y="447.50"></text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="84.4904%" y="421" width="0.0223%" height="15" fill="rgb(250,87,22)" fg:x="3797" fg:w="1"/><text x="84.7404%" y="431.50"></text></g><g><title>pearl::markov::message_bank::MessageBank::message_mut (286 samples, 6.36%)</title><rect x="82.3097%" y="501" width="6.3640%" height="15" fill="rgb(239,43,17)" fg:x="3699" fg:w="286"/><text x="82.5597%" y="511.50">pearl::m..</text></g><g><title>hashbrown::map::make_hash (187 samples, 4.16%)</title><rect x="84.5127%" y="485" width="4.1611%" height="15" fill="rgb(231,177,25)" fg:x="3798" fg:w="187"/><text x="84.7627%" y="495.50">hashb..</text></g><g><title>&lt;petgraph::graph_impl::NodeIndex&lt;Ix&gt; as core::hash::Hash&gt;::hash (105 samples, 2.34%)</title><rect x="86.3373%" y="469" width="2.3364%" height="15" fill="rgb(219,179,1)" fg:x="3880" fg:w="105"/><text x="86.5873%" y="479.50">&lt;..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.6515%" y="453" width="0.0223%" height="15" fill="rgb(238,219,53)" fg:x="3984" fg:w="1"/><text x="88.9015%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.6515%" y="437" width="0.0223%" height="15" fill="rgb(232,167,36)" fg:x="3984" fg:w="1"/><text x="88.9015%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.6515%" y="421" width="0.0223%" height="15" fill="rgb(244,19,51)" fg:x="3984" fg:w="1"/><text x="88.9015%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.6515%" y="405" width="0.0223%" height="15" fill="rgb(224,6,22)" fg:x="3984" fg:w="1"/><text x="88.9015%" y="415.50"></text></g><g><title>pearl::markov::message_bank::MessageRefMut::eval_state_mut (1 samples, 0.02%)</title><rect x="88.6738%" y="501" width="0.0223%" height="15" fill="rgb(224,145,5)" fg:x="3985" fg:w="1"/><text x="88.9238%" y="511.50"></text></g><g><title>@plt (1 samples, 0.02%)</title><rect x="89.7419%" y="485" width="0.0223%" height="15" fill="rgb(234,130,49)" fg:x="4033" fg:w="1"/><text x="89.9919%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.7641%" y="485" width="0.0223%" height="15" fill="rgb(254,6,2)" fg:x="4034" fg:w="1"/><text x="90.0141%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="89.7641%" y="469" width="0.0223%" height="15" fill="rgb(208,96,46)" fg:x="4034" fg:w="1"/><text x="90.0141%" y="479.50"></text></g><g><title>@plt (7 samples, 0.16%)</title><rect x="89.9421%" y="469" width="0.1558%" height="15" fill="rgb(239,3,39)" fg:x="4042" fg:w="7"/><text x="90.1921%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.7027%" y="453" width="0.0445%" height="15" fill="rgb(233,210,1)" fg:x="4211" fg:w="2"/><text x="93.9527%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.7027%" y="437" width="0.0445%" height="15" fill="rgb(244,137,37)" fg:x="4211" fg:w="2"/><text x="93.9527%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.7027%" y="421" width="0.0445%" height="15" fill="rgb(240,136,2)" fg:x="4211" fg:w="2"/><text x="93.9527%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="93.7027%" y="405" width="0.0445%" height="15" fill="rgb(239,18,37)" fg:x="4211" fg:w="2"/><text x="93.9527%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="389" width="0.0223%" height="15" fill="rgb(218,185,22)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="373" width="0.0223%" height="15" fill="rgb(225,218,4)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="357" width="0.0223%" height="15" fill="rgb(230,182,32)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="341" width="0.0223%" height="15" fill="rgb(242,56,43)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="325" width="0.0223%" height="15" fill="rgb(233,99,24)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="309" width="0.0223%" height="15" fill="rgb(234,209,42)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="293" width="0.0223%" height="15" fill="rgb(227,7,12)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="277" width="0.0223%" height="15" fill="rgb(245,203,43)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="261" width="0.0223%" height="15" fill="rgb(238,205,33)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="93.7250%" y="245" width="0.0223%" height="15" fill="rgb(231,56,7)" fg:x="4212" fg:w="1"/><text x="93.9750%" y="255.50"></text></g><g><title>__GI___exp (189 samples, 4.21%)</title><rect x="89.7864%" y="485" width="4.2056%" height="15" fill="rgb(244,186,29)" fg:x="4035" fg:w="189"/><text x="90.0364%" y="495.50">__GI_..</text></g><g><title>__ieee754_exp_fma (175 samples, 3.89%)</title><rect x="90.0979%" y="469" width="3.8941%" height="15" fill="rgb(234,111,31)" fg:x="4049" fg:w="175"/><text x="90.3479%" y="479.50">__ie..</text></g><g><title>libc_feholdsetround_sse_ctx (11 samples, 0.24%)</title><rect x="93.7472%" y="453" width="0.2448%" height="15" fill="rgb(241,149,10)" fg:x="4213" fg:w="11"/><text x="93.9972%" y="463.50"></text></g><g><title>__ieee754_log_fma (197 samples, 4.38%)</title><rect x="93.9920%" y="485" width="4.3836%" height="15" fill="rgb(249,206,44)" fg:x="4224" fg:w="197"/><text x="94.2420%" y="495.50">__iee..</text></g><g><title>__libc_start_main (3,734 samples, 83.09%)</title><rect x="15.3316%" y="741" width="83.0886%" height="15" fill="rgb(251,153,30)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="751.50">__libc_start_main</text></g><g><title>main (3,734 samples, 83.09%)</title><rect x="15.3316%" y="725" width="83.0886%" height="15" fill="rgb(239,152,38)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (3,734 samples, 83.09%)</title><rect x="15.3316%" y="709" width="83.0886%" height="15" fill="rgb(249,139,47)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,734 samples, 83.09%)</title><rect x="15.3316%" y="693" width="83.0886%" height="15" fill="rgb(244,64,35)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,734 samples, 83.09%)</title><rect x="15.3316%" y="677" width="83.0886%" height="15" fill="rgb(216,46,15)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,734 samples, 83.09%)</title><rect x="15.3316%" y="661" width="83.0886%" height="15" fill="rgb(250,74,19)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,734 samples, 83.09%)</title><rect x="15.3316%" y="645" width="83.0886%" height="15" fill="rgb(249,42,33)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="655.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (3,734 samples, 83.09%)</title><rect x="15.3316%" y="629" width="83.0886%" height="15" fill="rgb(242,149,17)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,734 samples, 83.09%)</title><rect x="15.3316%" y="613" width="83.0886%" height="15" fill="rgb(244,29,21)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,734 samples, 83.09%)</title><rect x="15.3316%" y="597" width="83.0886%" height="15" fill="rgb(220,130,37)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,734 samples, 83.09%)</title><rect x="15.3316%" y="581" width="83.0886%" height="15" fill="rgb(211,67,2)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,734 samples, 83.09%)</title><rect x="15.3316%" y="565" width="83.0886%" height="15" fill="rgb(235,68,52)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="575.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,734 samples, 83.09%)</title><rect x="15.3316%" y="549" width="83.0886%" height="15" fill="rgb(246,142,3)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pearl::main (3,734 samples, 83.09%)</title><rect x="15.3316%" y="533" width="83.0886%" height="15" fill="rgb(241,25,7)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="543.50">pearl::main</text></g><g><title>pearl::markov::MarkovRandomField&lt;X,NP,EP&gt;::belief_propagation (3,734 samples, 83.09%)</title><rect x="15.3316%" y="517" width="83.0886%" height="15" fill="rgb(242,119,39)" fg:x="689" fg:w="3734"/><text x="15.5816%" y="527.50">pearl::markov::MarkovRandomField&lt;X,NP,EP&gt;::belief_propagation</text></g><g><title>pearl::utils::functions::logsumexp (437 samples, 9.72%)</title><rect x="88.6960%" y="501" width="9.7241%" height="15" fill="rgb(241,98,45)" fg:x="3986" fg:w="437"/><text x="88.9460%" y="511.50">pearl::utils::..</text></g><g><title>__log (2 samples, 0.04%)</title><rect x="98.3756%" y="485" width="0.0445%" height="15" fill="rgb(254,28,30)" fg:x="4421" fg:w="2"/><text x="98.6256%" y="495.50"></text></g><g><title>_start (3,735 samples, 83.11%)</title><rect x="15.3316%" y="757" width="83.1108%" height="15" fill="rgb(241,142,54)" fg:x="689" fg:w="3735"/><text x="15.5816%" y="767.50">_start</text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="98.4201%" y="741" width="0.0223%" height="15" fill="rgb(222,85,15)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="751.50"></text></g><g><title>_dl_start_final (1 samples, 0.02%)</title><rect x="98.4201%" y="725" width="0.0223%" height="15" fill="rgb(210,85,47)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="735.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="98.4201%" y="709" width="0.0223%" height="15" fill="rgb(224,206,25)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="719.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="98.4201%" y="693" width="0.0223%" height="15" fill="rgb(243,201,19)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="703.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.02%)</title><rect x="98.4201%" y="677" width="0.0223%" height="15" fill="rgb(236,59,4)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="687.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.02%)</title><rect x="98.4201%" y="661" width="0.0223%" height="15" fill="rgb(254,179,45)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="671.50"></text></g><g><title>elf_machine_rela (1 samples, 0.02%)</title><rect x="98.4201%" y="645" width="0.0223%" height="15" fill="rgb(226,14,10)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="655.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.02%)</title><rect x="98.4201%" y="629" width="0.0223%" height="15" fill="rgb(244,27,41)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="639.50"></text></g><g><title>do_lookup_x (1 samples, 0.02%)</title><rect x="98.4201%" y="613" width="0.0223%" height="15" fill="rgb(235,35,32)" fg:x="4423" fg:w="1"/><text x="98.6701%" y="623.50"></text></g><g><title>core::fmt::Formatter::pad_integral (13 samples, 0.29%)</title><rect x="98.4424%" y="757" width="0.2893%" height="15" fill="rgb(218,68,31)" fg:x="4424" fg:w="13"/><text x="98.6924%" y="767.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::Debug for u32&gt;::fmt (16 samples, 0.36%)</title><rect x="98.7316%" y="757" width="0.3560%" height="15" fill="rgb(207,120,37)" fg:x="4437" fg:w="16"/><text x="98.9816%" y="767.50"></text></g><g><title>pearl (4,489 samples, 99.89%)</title><rect x="0.0000%" y="773" width="99.8887%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="4489"/><text x="0.2500%" y="783.50">pearl</text></g><g><title>core::fmt::write (36 samples, 0.80%)</title><rect x="99.0877%" y="757" width="0.8011%" height="15" fill="rgb(207,7,3)" fg:x="4453" fg:w="36"/><text x="99.3377%" y="767.50"></text></g><g><title>all (4,494 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="4494"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (5 samples, 0.11%)</title><rect x="99.8887%" y="773" width="0.1113%" height="15" fill="rgb(217,5,26)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="757" width="0.1113%" height="15" fill="rgb(235,190,38)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="741" width="0.1113%" height="15" fill="rgb(247,86,24)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="725" width="0.1113%" height="15" fill="rgb(205,101,16)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="709" width="0.1113%" height="15" fill="rgb(246,168,33)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="693" width="0.1113%" height="15" fill="rgb(231,114,1)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="677" width="0.1113%" height="15" fill="rgb(207,184,53)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="661" width="0.1113%" height="15" fill="rgb(224,95,51)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="645" width="0.1113%" height="15" fill="rgb(212,188,45)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="629" width="0.1113%" height="15" fill="rgb(223,154,38)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="613" width="0.1113%" height="15" fill="rgb(251,22,52)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="597" width="0.1113%" height="15" fill="rgb(229,209,22)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="581" width="0.1113%" height="15" fill="rgb(234,138,34)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.11%)</title><rect x="99.8887%" y="565" width="0.1113%" height="15" fill="rgb(212,95,11)" fg:x="4489" fg:w="5"/><text x="100.1387%" y="575.50"></text></g></svg></svg>